
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM PLC_PRG
VAR CONSTANT
  	(* Version control *)
	cVERSION_MAJOR	: WORD  := 0; 	(* Version major index *)
	cVERSION_MINOR	: WORD  := 1; 	(* Version minor index *)

	(* BR_SELECTOR indexes *)
	cSINS01			: WORD	:= 1;	(* SINS.1 branchline *)
	cSINS02			: WORD	:= 2;	(* SINS.2 branchline *)
	cSINS03			: WORD	:= 3;	(* SINS.3 branchline *)
	cYAG			: WORD	:= 4;	(* YAG screen *)

	(* Actuator Limits *)
	cBR_SELECTOR_UL	: WORD	:= 10000;
	cACTUATOR_TARGET: ARRAY [1..4] OF WORD := 0,9500,2500,7225;
END_VAR

VAR
(* ********** Supervisory Control **********  *)
(* PFC_OUT DISCRETES 	*)
(* %MX0.0  .. %MX639.15		*)
	SC_RESET_REQUIRED AT %MX0.0:BOOL;
	(* 1 SPARE *)
	SC_ATB	AT %MX0.2: BOOL := TRUE;
	SC_AFB  AT %MX0.3: BOOL := FALSE;
	(* 4 SPARE *)

	SC_PE101_PSL AT %MX0.8:BOOL;
	SC_PE201_PSL AT %MX0.9:BOOL;
	SC_PE202_PSL AT %MX0.10:BOOL;
	(* 1 SPARE *)

	SC_RP2110_AT_SPEED AT %MX0.12:BOOL;
	SC_RP2111_AT_SPEED AT %MX0.13:BOOL;
	SC_PE2110_PSL AT %MX0.14:BOOL;
	SC_PE2111_PSL AT %MX0.15:BOOL;

	SC_PE203_OK AT %MX1.0:BOOL;
	SC_PE203_PSL_HI AT %MX1.1:BOOL;
	SC_PE203_PSL_MIDHI AT %MX1.2:BOOL;
	SC_PE203_PSL_MIDLO AT %MX1.3:BOOL;
	SC_PE203_PSL_LO AT %MX1.4:BOOL;
	(* 3 SPARE *)

	SC_PE211_OK AT %MX1.8:BOOL;
	SC_PE211_PSL_HI AT %MX1.9:BOOL;
	SC_PE211_PSL_MIDHI AT %MX1.10:BOOL;
	SC_PE211_PSL_MIDLO AT %MX1.11:BOOL;
	SC_PE211_PSL_LO AT %MX1.12:BOOL;
	(* 3 SPARE *)

	SC_PE212_OK  AT %MX2.0:BOOL;
	SC_PE212_PSL_HI  AT %MX2.1:BOOL;
	SC_PE212_PSL_MIDHI  AT %MX2.2:BOOL;
	SC_PE212_PSL_MIDLO  AT %MX2.3:BOOL;
	SC_PE212_PSL_LO  AT %MX2.4:BOOL;
	(* 3 SPARE *)

	SC_LL211_LID_CLOSED  AT %MX2.8:BOOL;
	SC_LL211_ARM_RETRACTED  AT %MX2.9:BOOL;
	(* 6 SPARE *)

	SC_V100_OPEN AT %MX3.0:BOOL;
	SC_V100_CLOSED AT %MX3.1:BOOL;
	(* 6 SPARE *)

	SC_V101_BEAM_PASS AT %MX3.8:BOOL;
	SC_V101_OPEN AT %MX3.9:BOOL;
	SC_V101_CLOSED AT %MX3.10:BOOL;
	SC_V101_OPEN_PERMIT AT %MX3.11:BOOL;
	SC_V101_CLOSE_PERMIT AT %MX3.12:BOOL;
	SC_V101_OPEN_CMD AT %MX3.13:BOOL;
	SC_V101_NOT_SYMBOL AT %MX3.14:BOOL;
	(* 1 SPARE *)

	SC_V201_BEAM_PASS AT %MX4.0 : BOOL;
	SC_V201_OPEN AT %MX4.1 : BOOL;
	SC_V201_CLOSED AT %MX4.2 : BOOL;
	SC_V201_OPEN_PERMIT AT %MX4.3 : BOOL;
	SC_V201_CLOSE_PERMIT AT %MX4.4 : BOOL;
	SC_V201_OPEN_CMD AT %MX4.5 : BOOL;
	SC_V201_NOT_SYMBOL AT %MX4.6:BOOL;
	(* 1 SPARE *)

	SC_V202_OPEN AT %MX4.8 : BOOL;
	SC_V202_CLOSED AT %MX4.9 : BOOL;
	SC_V202_BEAM_PASS AT %MX4.10 : BOOL;
	(* 5 SPARE *)

	SC_V203_BEAM_PASS AT %MX5.0 : BOOL;
	SC_V203_OPEN AT %MX5.1 : BOOL;
	SC_V203_CLOSED AT %MX5.2 : BOOL;
	SC_V203_OPEN_PERMIT AT %MX5.3 : BOOL;
	SC_V203_CLOSE_PERMIT AT %MX5.4 : BOOL;
	SC_V203_OPEN_CMD AT %MX5.5 : BOOL;
	SC_V203_NOT_SYMBOL AT %MX5.6:BOOL;
	(* 1 SPARE *)

	SC_V204_BEAM_PASS AT %MX5.8 : BOOL;
	SC_V204_OPEN AT %MX5.9 : BOOL;
	SC_V204_CLOSED AT %MX5.10 : BOOL;
	SC_V204_OPEN_PERMIT AT %MX5.11 : BOOL;
	SC_V204_CLOSE_PERMIT AT %MX5.12 : BOOL;
	SC_V204_OPEN_CMD AT %MX5.13 : BOOL;
	SC_V204_NOT_SYMBOL AT %MX5.14:BOOL;
	(* 1 SPARE *)

	(* 1 SPARE *)
	SC_RPV211_OPEN AT %MX6.1 : BOOL;
	SC_RPV211_CLOSED AT %MX6.2 : BOOL;
	(* 2 SPARE *)
	SC_RPV211_OPEN_CMD AT %MX6.5 : BOOL;
	(* 2 SPARE *)

	(* 3 SPARE *)
	SC_VENT211_SLOW_CMD AT %MX6.11 : BOOL;
	SC_VENT211_FAST_CMD AT %MX6.12 : BOOL;
	(* 3 SPARE *)

	(* 1 SPARE *)
	SC_TPV211_OPEN AT %MX7.1 : BOOL;
	SC_TPV211_CLOSED AT %MX7.2 : BOOL;
	(* 2 SPARE *)
	SC_TPV211_OPEN_CMD AT %MX7.5 : BOOL;
	(* 2 SPARE *)

	(* 1 SPARE *)
	SC_SLOTV211_OPEN AT %MX7.9 : BOOL;
	SC_SLOTV211_CLOSED AT %MX7.10 : BOOL;
	SC_SLOTV211_OPEN_PERMIT AT %MX7.11 : BOOL;
	SC_SLOTV211_CLOSE_PERMIT AT %MX7.12 : BOOL;
	SC_SLOTV211_OPEN_CMD AT %MX7.13 : BOOL;
	SC_SLOTV211_CLOSE_CMD AT %MX7.14 : BOOL;
	SC_SLOTV211_NOT_SYMBOL AT %MX7.15:BOOL;

	(* 1 SPARE *)
	SC_RPV212_OPEN AT %MX8.1 : BOOL;
	SC_RPV212_CLOSED AT %MX8.2 : BOOL;
	(* 2 SPARE *)
	SC_RPV212_OPEN_CMD AT %MX8.5 : BOOL;
	(* 2 SPARE *)

	(* 3 SPARE *)
	SC_VENT212_SLOW_CMD AT %MX8.11 : BOOL;
	SC_VENT212_FAST_CMD AT %MX8.12 : BOOL;
	(* 3 SPARE *)

	(* 1 SPARE *)
	SC_TPV212_OPEN AT %MX9.1 : BOOL;
	SC_TPV212_CLOSED AT %MX9.2 : BOOL;
    (* 2 SPARE *)
	SC_TPV212_OPEN_CMD AT %MX9.5 : BOOL;
	(* 2 SPARE *)

	SC_RP2110_ON AT %MX9.8 : BOOL;
	SC_RP2110_ON_CMD AT %MX9.9 : BOOL;
	(* 6 SPARE *)

	SC_RP2111_ON AT %MX10.0 : BOOL;
	SC_RP2111_ON_CMD AT %MX10.1 : BOOL;
	(* 3 SPARE *)
	SC_TP201_VENT_ENABLE_CMD AT %MX10.5 : BOOL;
	SC_TP201_VENT_NOT_SYMBOL AT %MX10.6 : BOOL;
	(* 1 SPARE *)

	SC_TP201_OK AT %MX10.8 : BOOL;
	SC_TP201_ON AT %MX10.9 : BOOL;
	SC_TP201_OFF AT %MX10.10 : BOOL;
	SC_TP201_ON_PERMIT AT %MX10.11 : BOOL;
	SC_TP201_OFF_PERMIT AT %MX10.12 : BOOL;
	SC_TP201_ON_CMD AT %MX10.13 : BOOL;
	SC_TP201_NOT_SYMBOL AT %MX10.14:BOOL;
	(* 1 SPARE *)

	SC_TP211_OK AT %MX11.0 : BOOL;
	SC_TP211_ON AT %MX11.1 : BOOL;
	SC_TP211_OFF AT %MX11.2 : BOOL;
	(* 5 SPARE *)

	SC_TP212_OK AT %MX11.8 : BOOL;
	SC_TP212_ON AT %MX11.9 : BOOL;
	SC_TP212_OFF AT %MX11.10 : BOOL;
	(* 5 SPARE *)

	SC_LL_ACTUATOR_OK AT %MX12.0 : BOOL;
	SC_LL_PE101_PSL AT %MX12.1 : BOOL;
	SC_LL_PE201_PSL AT %MX12.2 : BOOL;
	SC_LL_V202_OPN AT %MX12.3 : BOOL;
	SC_LL_PE202_PSL AT %MX12.4 : BOOL;
	SC_LL_PE203_OK AT %MX12.5 : BOOL;
	SC_LL_PE203_PSL_LO AT %MX12.6 : BOOL;
	SC_LL_TP201_OK AT %MX12.7 : BOOL;
	(* 8 SPARE *)

	SC_LL_ES_CONFIG_OK AT %MX13.0 : BOOL;
	SC_LL_LL_CONFIG_OK AT %MX13.1 : BOOL;
	SC_LL_PE211_OK AT %MX13.2 : BOOL;
	SC_LL_PE212_OK AT %MX13.3 : BOOL;
	SC_LL_RP2111_ON AT %MX13.4 : BOOL;
	SC_LL_PE2111_PSL AT %MX13.5 : BOOL;
	SC_LL_TP211_TURBO_OK AT %MX13.6 : BOOL;
	SC_LL_TP212_TURBO_OK AT %MX13.7 : BOOL;
	SC_LL_PE2111_PSL_ES AT %MX13.8 : BOOL;
	SC_LL_PE2111_PSL_LL AT %MX13.9 : BOOL;
	(* 6 SPARE *)

(* PFC_IN DISCRETES			*)
(* %MX640.0 .. %MX1279.15 	*)
	SC_RESET_REQ AT %MX640.0 : BOOL;
	(* 15 SPARE *)

	SC_V101_OPN_REQ AT %MX641.0 : BOOL;
	SC_V101_CLS_REQ AT %MX641.1 : BOOL;
	SC_V201_OPN_REQ AT %MX641.2 : BOOL;
	SC_V201_CLS_REQ AT %MX641.3 : BOOL;
	(* 2 RESERVED *)
	SC_V203_OPN_REQ AT %MX641.6 : BOOL;
	SC_V203_CLS_REQ AT %MX641.7 : BOOL;
	SC_V204_OPN_REQ AT %MX641.8 : BOOL;
	SC_V204_CLS_REQ AT %MX641.9 : BOOL;
	SC_TP201_ON_REQ AT %MX641.10 : BOOL;
	SC_TP201_OFF_REQ AT %MX641.11 : BOOL;
	SC_TP201_VENT_ENABLE_REQ AT %MX641.12 : BOOL;
	SC_TP201_VENT_DISABLE_REQ AT %MX641.13 : BOOL;
	(* 2 SPARE *)

	SC_SLOTV211_OPN_REQ AT %MX642.0 : BOOL;
	SC_SLOTV211_CLS_REQ AT %MX642.1 : BOOL;
	(* 14 SPARE *)

(* PFC_OUT WORDs		*)
(* %MW1280  .. %MW3711	*)
	(* Version Numbers *)
	SC_VERSION_MAJOR AT %MW1280 : WORD;
	SC_VERSION_MINOR AT %MW1281 : WORD;
	(* 2 RESERVED *)

	(* Analog vacuum pressure *)
	SC_PE101_PIY AT %MW1284 : WORD;
	SC_PE201_PIY AT %MW1285 : WORD;
	SC_PE202_PIY AT %MW1286 : WORD;
	SC_PE203_HI_PIY AT %MW1287 : WORD;
	SC_PE203_LO_PIY AT %MW1288 : WORD;
	SC_PE211_HI_PIY AT %MW1289 : WORD;
	SC_PE211_LO_PIY AT %MW1290 : WORD;
	SC_PE212_HI_PIY AT %MW1291 : WORD;
	SC_PE212_LO_PIY AT %MW1292 : WORD;
	(* 3 SPARE *)

	(* State Machine current command values *)
	SC_BR_CMD_VAL AT %MW1296 : WORD;
	SC_ES_CMD_VAL AT %MW1297 : WORD;
	SC_LL_CMD_VAL AT %MW1298 : WORD;
	(* 5 SPARE *)

	(* State Machine current values *)
	SC_BR_STATE AT %MW1304 : WORD;
	SC_ES_STATE AT %MW1305 : WORD;
	SC_LL_STATE AT %MW1306 : WORD;
	(* 5 SPARE *)


(* PFC_IN WORDs			*)
(* %MW3712  .. %MW4927	*)
	(* State Machine current command requests *)
	SC_BR_CMD_REQ AT %MW3712 : WORD;
	SC_ES_CMD_REQ AT %MW3713 : WORD;
	SC_LL_CMD_REQ AT %MW3714 : WORD;
	(* 5 SPARE *)



(* ****** Internal Variables ****** *)
	count	: BYTE;
	count2  : BYTE;
	a_num   : BYTE;

  	(* Request to reset latched faults *)
  	RESET_REQ : BOOL;

	(* Vacuum Interlocks *)
	PE101_PSL_LO: BOOL;
	PE201_PSL_LO: BOOL;
	PE202_PSL_LO: BOOL;
	PE203_PIY_OK: BOOL;
	PE203_PSH_HI: BOOL;
	PE203_PSH_MIDHI: BOOL;
	PE203_PSL_MIDLO: BOOL;
	PE203_PSL_LO: BOOL;
	PE211_PIY_OK: BOOL;
	PE211_PSH_HI: BOOL;
	PE211_PSH_MIDHI: BOOL;
	PE211_PSL_MIDLO: BOOL;
	PE211_PSL_LO: BOOL;
	PE212_PIY_OK: BOOL;
	PE212_PSH_HI: BOOL;
	PE212_PSH_MIDHI: BOOL;
	PE212_PSL_MIDLO: BOOL;
	PE212_PSL_LO: BOOL;
	RP211_PSL: BOOL;
	BP211_PSL: BOOL;

	(* Valve Positions *)
	V100_OPN: BOOL;
	V100_CSD: BOOL;
	V101_OPN: BOOL;
	V101_CSD: BOOL;
	V201_OPN: BOOL;
	V201_CSD: BOOL;
	V202_OPN: BOOL;
	V202_CSD: BOOL;
	V203_OPN: BOOL;
	V203_CSD: BOOL;
	V204_OPN: BOOL;
	V204_CSD: BOOL;
	VPV211_OPN: BOOL;
	VPV211_CSD: BOOL;
	RPV211_OPN: BOOL;
	RPV211_CSD: BOOL;
	TPV211_OPN: BOOL;
	TPV211_CSD: BOOL;
	LLV211_OPN: BOOL;
	LLV211_CSD: BOOL;
	VPV212_OPN: BOOL;
	VPV212_CSD: BOOL;
	RPV212_OPN: BOOL;
	RPV212_CSD: BOOL;
	TPV212_OPN: BOOL;
	TPV212_CSD: BOOL;

	(* Pump Status *)
	TP201_OK: BOOL;
	TP201_ON: BOOL;
	TP201_READY: BOOL;
	TP211_OK: BOOL;
	TP211_READY: BOOL;
	TP212_OK: BOOL;
	TP212_READY: BOOL;
	RP211_ON: BOOL;
	BP211_ON: BOOL;

	(* LoadLock Status *)
	LL211_LID_CLOSED: BOOL;
	LL211_ARM_RETRACTED: BOOL;

	(* Configuration Interlocks *)
	ES_CONFIG_OK: BOOL;
	LL_CONFIG_OK: BOOL;

	(* Latched Interlocks *)
	LL_ACTUATOR_OK: BOOL;
	LL_PE101_PSL_LO: BOOL;
	LL_PE201_PSL_LO: BOOL;
	LL_V202_OPN: BOOL;
	LL_PE202_PSL_LO: BOOL;
	LL_PE203_PIY_OK: BOOL;
	LL_PE203_PSL_LO: BOOL;
	LL_TP201_OK: BOOL;
	LL_ES_CONFIG_OK: BOOL;
	LL_LL_CONFIG_OK: BOOL;
	LL_PE211_PIY_OK: BOOL;
	LL_PE212_PIY_OK: BOOL;
	LL_BP211_ON: BOOL;
	LL_TP211_OK: BOOL;
	LL_TP212_OK: BOOL;

	Reset_Required: BOOL;

	(* IAI Actuator Data and Commands *)
	ACTUATOR_AT_TARGET: WORD;
	ACTUATOR_CMD: WORD;
	ACTUATOR_OK: BOOL;

	(* Valve and Pump requests *)
	V101_OPN_REQ_SC: BOOL;
	V101_CLS_REQ_SC: BOOL;
	V201_OPN_REQ_SC: BOOL;
	V201_CLS_REQ_SC: BOOL;
	V203_OPN_REQ_SC: BOOL;
	V203_CLS_REQ_SC: BOOL;
	V204_OPN_REQ_SC: BOOL;
	V204_CLS_REQ_SC: BOOL;
	V204_CLS_REQ_ES: BOOL;
	VPV211_SLOW_OPN_REQ_ES: BOOL;
	VPV211_SLOW_CLS_REQ_ES: BOOL;
	VPV211_FAST_OPN_REQ_ES: BOOL;
	VPV211_FAST_CLS_REQ_ES: BOOL;
	RPV211_OPN_REQ_ES: BOOL;
	RPV211_CLS_REQ_ES: BOOL;
	TPV211_OPN_REQ_ES: BOOL;
	TPV211_CLS_REQ_ES: BOOL;
	LLV211_OPN_REQ_SC: BOOL;
	LLV211_CLS_REQ_SC: BOOL;
	LLV211_CLS_REQ_ES: BOOL;
	LLV211_CLS_REQ_LL: BOOL;
	VPV212_SLOW_OPN_REQ_LL: BOOL;
	VPV212_SLOW_CLS_REQ_LL: BOOL;
	VPV212_FAST_OPN_REQ_LL: BOOL;
	VPV212_FAST_CLS_REQ_LL: BOOL;
	RPV212_OPN_REQ_LL: BOOL;
	RPV212_CLS_REQ_LL: BOOL;
	TPV212_OPN_REQ_LL: BOOL;
	TPV212_CLS_REQ_LL: BOOL;

	TP201_ON_REQ_SC: BOOL;
	TP201_OFF_REQ_SC: BOOL;
	TP201_VENT_ENABLE_REQ_SC: BOOL;
	TP201_VENT_DISABLE_REQ_SC: BOOL;

	RP211_ON_REQ_ES: BOOL;
	RP211_ON_REQ_LL: BOOL;
	TP211_ON_REQ_ES: BOOL;
	TP211_OFF_REQ_ES: BOOL;
	TP212_ON_REQ_LL: BOOL;
	TP212_OFF_REQ_LL: BOOL;

	(* State Machine States and Controls*)
	BR_STATE: BR_ST := BR_ERROR;
	BR_REQUEST: BR_REQ := BR_NONE_REQ;
	ES_STATE: PV_ST := PV_ERROR;
	ES_REQUEST: PV_REQ := PV_NONE_REQ;
	LL_STATE: PV_ST := PV_ERROR;
	LL_REQUEST: PV_REQ := PV_NONE_REQ;

	(* Valves *)
	V101: VALVE_FB;
	V201: VALVE_FB;
	V203: VALVE_FB;
	V204: VALVE_FB;

	VPV201: VALVE_FB;
	VPV211_SLOW: VALVE_FB;
	VPV211_FAST: VALVE_FB;
	RPV211: VALVE_FB;
	TPV211: VALVE_FB;

	LLV211: VALVE_BI_FB;

	VPV212_SLOW: VALVE_FB;
	VPV212_FAST: VALVE_FB;
	RPV212: VALVE_FB;
	TPV212: VALVE_FB;

	(* Pumps *)
	TP201: TP_FB;

	RP211: RP_FB;
	BP211_ON_CMD: BOOL := TRUE; (* always on *)

	TP211: TP_FB;
	TP212: TP_FB;
END_VAR


(* @END_DECLARATION := '0' *)
(* Evaluate Inputs *)
Process_Inputs();
SC_Inputs();
Actuator_Inputs();

(* Temporary interlock bypasses *)
Bypasses();

(* Internal logic *)
Fault_Logic();

BR_SM();
ES_SM();
LL_SM();

Pumps();   (* must go before Valves() *)
Valves();

(* Evaluate Outputs *)
Actuator_Outputs();
SC_Outputs();
Process_Outputs();

(* Clear rising edge requests *)
Clear_Reqs();

END_PROGRAM
ACTION	Actuator_Inputs:
(* Process Actuator Inputs *)

ACTUATOR_OK := NOT (wActuatorStatus.10 OR wActuatorStatus.12);

IF (xActuatorReady) THEN
	FOR count2:=1 TO 4 DO
		IF (wActuatorPosition = cACTUATOR_TARGET[count2]) THEN
			ACTUATOR_AT_TARGET := count2;
			EXIT;
		END_IF;
	END_FOR;
ELSE
	ACTUATOR_AT_TARGET := 0;
END_IF;

END_ACTION

ACTION	Actuator_Outputs:
(* IAI Actuator Outputs *)

IF ACTUATOR_CMD <> 0 THEN
	wActuatorTarget := cACTUATOR_TARGET[ACTUATOR_CMD] ;
END_IF

END_ACTION

ACTION	BR_SM:
(* State Machine for BRanchline selection *)

(* Always test for BR_ERROR first *)
IF NOT LL_ACTUATOR_OK THEN
	BR_STATE := BR_ERROR;
END_IF

CASE BR_STATE OF
	BR_ERROR:
		(* Leave in place *)
		ACTUATOR_CMD := 0;

		IF LL_ACTUATOR_OK THEN
			BR_STATE := BR_SINS1_SELECTING;
		END_IF

	BR_SINS1_SELECTING:
		(* Move actuator to SINS.1 *)
		ACTUATOR_CMD := cSINS01;

		(* Wait for motion to complete *)
		IF ACTUATOR_AT_TARGET = ACTUATOR_CMD THEN
			BR_STATE := BR_SINS1_READY;
		ELSIF BR_REQUEST = BR_SINS1_REQ THEN
			BR_STATE := BR_SINS1_SELECTING;
		ELSIF BR_REQUEST = BR_SINS2_REQ THEN
			BR_STATE := BR_SINS2_SELECTING;
		ELSIF BR_REQUEST = BR_SINS3_REQ THEN
			BR_STATE := BR_SINS3_SELECTING;
		ELSIF BR_REQUEST = BR_YAG_REQ THEN
			BR_STATE := BR_YAG_SELECTING;
		END_IF

	BR_SINS1_READY:
		(* Keep at SINS.1 *)
		ACTUATOR_CMD := cSINS01;

		(* Look for state change request *)
		IF BR_REQUEST = BR_NONE_REQ THEN
			BR_STATE := BR_SINS1_READY;
		ELSIF BR_REQUEST = BR_SINS1_REQ THEN
			BR_STATE := BR_SINS1_READY;
		ELSIF BR_REQUEST = BR_SINS2_REQ THEN
			BR_STATE := BR_SINS2_SELECTING;
		ELSIF BR_REQUEST = BR_SINS3_REQ THEN
			BR_STATE := BR_SINS3_SELECTING;
		ELSIF BR_REQUEST = BR_YAG_REQ THEN
			BR_STATE := BR_YAG_SELECTING;
		END_IF

	BR_SINS2_SELECTING:
		(* Move actuator to SINS.2 *)
		ACTUATOR_CMD := cSINS02;

		(* Wait for motion to complete *)
		IF ACTUATOR_AT_TARGET = ACTUATOR_CMD THEN
			BR_STATE := BR_SINS2_READY;
		(* Else look for state change request *)
		ELSIF BR_REQUEST = BR_SINS1_REQ THEN
			BR_STATE := BR_SINS1_SELECTING;
		ELSIF BR_REQUEST = BR_SINS2_REQ THEN
			BR_STATE := BR_SINS2_SELECTING;
		ELSIF BR_REQUEST = BR_SINS3_REQ THEN
			BR_STATE := BR_SINS3_SELECTING;
		ELSIF BR_REQUEST = BR_YAG_REQ THEN
			BR_STATE := BR_YAG_SELECTING;
		END_IF

	BR_SINS2_READY:
		(* Keep at SINS.2 *)
		ACTUATOR_CMD := cSINS02;

		(* Look for state change request *)
		IF BR_REQUEST = BR_NONE_REQ THEN
			BR_STATE := BR_SINS2_READY;
		ELSIF BR_REQUEST = BR_SINS1_REQ THEN
			BR_STATE := BR_SINS1_SELECTING;
		ELSIF BR_REQUEST = BR_SINS2_REQ THEN
			BR_STATE := BR_SINS2_READY;
		ELSIF BR_REQUEST = BR_SINS3_REQ THEN
			BR_STATE := BR_SINS3_SELECTING;
		ELSIF BR_REQUEST = BR_YAG_REQ THEN
			BR_STATE := BR_YAG_SELECTING;
		END_IF


	BR_SINS3_SELECTING:
		(* Move actuator to SINS.3 *)
		ACTUATOR_CMD := cSINS03;

		(* Wait for motion to complete *)
		IF ACTUATOR_AT_TARGET = ACTUATOR_CMD THEN
			BR_STATE := BR_SINS3_READY;
		(* Else look for state change request *)
		ELSIF BR_REQUEST = BR_SINS1_REQ THEN
			BR_STATE := BR_SINS1_SELECTING;
		ELSIF BR_REQUEST = BR_SINS2_REQ THEN
			BR_STATE := BR_SINS2_SELECTING;
		ELSIF BR_REQUEST = BR_SINS3_REQ THEN
			BR_STATE := BR_SINS3_SELECTING;
		ELSIF BR_REQUEST = BR_YAG_REQ THEN
			BR_STATE := BR_YAG_SELECTING;
		END_IF

	BR_SINS3_READY:
		(* Keep at SINS.3 *)
		ACTUATOR_CMD := cSINS03;

		(* Look for state change request *)
		IF BR_REQUEST = BR_NONE_REQ THEN
			BR_STATE := BR_SINS3_READY;
		ELSIF BR_REQUEST = BR_SINS1_REQ THEN
			BR_STATE := BR_SINS1_SELECTING;
		ELSIF BR_REQUEST = BR_SINS2_REQ THEN
			BR_STATE := BR_SINS2_SELECTING;
		ELSIF BR_REQUEST = BR_SINS3_REQ THEN
			BR_STATE := BR_SINS3_READY;
		ELSIF BR_REQUEST = BR_YAG_REQ THEN
			BR_STATE := BR_YAG_SELECTING;
		END_IF


	BR_YAG_SELECTING:
		(* Move actuator to YAG *)
		ACTUATOR_CMD := cYAG;

		(* Wait for motion to complete *)
		IF ACTUATOR_AT_TARGET = ACTUATOR_CMD THEN
			BR_STATE := BR_YAG_READY;
		(* Else look for state change request *)
		ELSIF BR_REQUEST = BR_SINS1_REQ THEN
			BR_STATE := BR_SINS1_SELECTING;
		ELSIF BR_REQUEST = BR_SINS2_REQ THEN
			BR_STATE := BR_SINS2_SELECTING;
		ELSIF BR_REQUEST = BR_SINS3_REQ THEN
			BR_STATE := BR_SINS3_SELECTING;
		ELSIF BR_REQUEST = BR_YAG_REQ THEN
			BR_STATE := BR_YAG_SELECTING;
		END_IF

	BR_YAG_READY:
		(* Keep at YAG *)
		ACTUATOR_CMD := cYAG;

		(* Look for state change request *)
		IF BR_REQUEST = BR_NONE_REQ THEN
			BR_STATE := BR_YAG_READY;
		ELSIF BR_REQUEST = BR_SINS1_REQ THEN
			BR_STATE := BR_SINS1_SELECTING;
		ELSIF BR_REQUEST = BR_SINS2_REQ THEN
			BR_STATE := BR_SINS2_SELECTING;
		ELSIF BR_REQUEST = BR_SINS3_REQ THEN
			BR_STATE := BR_SINS3_SELECTING;
		ELSIF BR_REQUEST = BR_YAG_REQ THEN
			BR_STATE := BR_YAG_READY;
		END_IF

	ELSE
		BR_STATE := BR_ERROR;
END_CASE;
END_ACTION

ACTION	Bypasses:
(* Temporary Bypass Logic *)
	(* Will remove this after initial testing *)
	ACTUATOR_OK := TRUE;
	ES_CONFIG_OK := TRUE;
	LL_CONFIG_OK := TRUE;

	(* For testing at LBNL *)
	PE101_PSL_LO := TRUE;
	PE201_PSL_LO := TRUE;
	PE202_PSL_LO := TRUE;

	V100_OPN := TRUE;
	V100_CSD := FALSE;

	V101_OPN := FALSE;
	V101_CSD := TRUE;

	V201_OPN := TRUE;
	V201_CSD := FALSE;

	V202_OPN := TRUE;
	V202_CSD := FALSE;

	V203_OPN := FALSE;
	V203_CSD := TRUE;

END_ACTION

ACTION	Clear_Reqs:
(* Clear all edge-triggered supervisory requests *)

SC_RESET_REQ := 0;

SC_V101_OPN_REQ := 0;
SC_V101_CLS_REQ := 0;

SC_V201_OPN_REQ := 0;
SC_V201_CLS_REQ := 0;

SC_V203_OPN_REQ := 0;
SC_V203_CLS_REQ := 0;

SC_V204_OPN_REQ := 0;
SC_V204_CLS_REQ := 0;

SC_TP201_ON_REQ := 0;
SC_TP201_OFF_REQ := 0;
SC_TP201_VENT_ENABLE_REQ := 0;
SC_TP201_VENT_DISABLE_REQ := 0;

SC_SLOTV211_OPN_REQ := 0;
SC_SLOTV211_CLS_REQ := 0;

END_ACTION

ACTION	ES_SM:
(* ES211 Pump/Vent State Machine *)

(* Always test for PV_ERROR first *)
IF NOT (LL_PE211_PIY_OK AND LL_ES_CONFIG_OK) THEN
	ES_STATE := PV_ERROR;
END_IF

CASE ES_STATE OF
	PV_ERROR:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := TRUE;
		RPV211_OPN_REQ_ES := FALSE;
		RP211_ON_REQ_ES := FALSE;
		VPV211_SLOW_OPN_REQ_ES := FALSE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := FALSE;
		TP211_ON_REQ_ES := FALSE;

		IF LL_PE211_PIY_OK THEN
			ES_STATE := PV_ISOLATING;
		END_IF

	PV_ISOLATING:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := TRUE;
		RPV211_OPN_REQ_ES := FALSE;
		RP211_ON_REQ_ES := FALSE;
		VPV211_SLOW_OPN_REQ_ES := FALSE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := FALSE;
		TP211_ON_REQ_ES := FALSE;

		IF V204_CSD AND LLV211_CSD AND RPV211_CSD  THEN
			ES_STATE := PV_ISOLATED;
		END_IF

	PV_ISOLATED:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := TRUE;
		RPV211_OPN_REQ_ES := FALSE;
		RP211_ON_REQ_ES := FALSE;
		VPV211_SLOW_OPN_REQ_ES := FALSE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := FALSE;
		TP211_ON_REQ_ES := FALSE;

		IF (ES_REQUEST = PV_VENT_REQ) THEN
			ES_STATE := PV_SLOW_VENTING;
		ELSIF (ES_REQUEST = PV_PUMP_REQ) AND PE211_PSL_MIDLO AND TP211_OK THEN
			ES_STATE := PV_TP_PUMPING;
		ELSIF (ES_REQUEST = PV_PUMP_REQ) THEN
			ES_STATE := PV_RP_STARTING;
		END_IF

	PV_SLOW_VENTING:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := TRUE;
		RPV211_OPN_REQ_ES := FALSE;
		RP211_ON_REQ_ES := FALSE;
		VPV211_SLOW_OPN_REQ_ES := TRUE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := FALSE;
		TP211_ON_REQ_ES := FALSE;

		IF (ES_REQUEST = PV_NONE_REQ) THEN
			ES_STATE := PV_SLOW_VENTING;
		ELSIF NOT (ES_REQUEST = PV_VENT_REQ) THEN
			ES_STATE := PV_ISOLATING;
		ELSIF (PE211_PSH_MIDHI) THEN
			ES_STATE := PV_FAST_VENTING;
		END_IF

	PV_FAST_VENTING:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := TRUE;
		RPV211_OPN_REQ_ES := FALSE;
		RP211_ON_REQ_ES := FALSE;
		VPV211_SLOW_OPN_REQ_ES := TRUE;
		VPV211_FAST_OPN_REQ_ES := TRUE;
		TPV211_OPN_REQ_ES := FALSE;
		TP211_ON_REQ_ES := FALSE;

		IF (ES_REQUEST = PV_NONE_REQ) THEN
			ES_STATE := PV_FAST_VENTING;
		ELSIF NOT (ES_REQUEST = PV_VENT_REQ) THEN
			ES_STATE := PV_ISOLATING;
		ELSIF (PE211_PSH_HI) THEN
			ES_STATE := PV_VENTED;
		END_IF

	PV_VENTED:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := FALSE; (* LLV211 can be opened when both ES211 and LL211 are vented *)
		RPV211_OPN_REQ_ES := FALSE;
		RP211_ON_REQ_ES := FALSE;
		VPV211_SLOW_OPN_REQ_ES := FALSE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := FALSE;
		TP211_ON_REQ_ES := FALSE;

		IF (ES_REQUEST = PV_NONE_REQ) THEN
			ES_STATE := PV_VENTED;
		ELSIF NOT (ES_REQUEST = PV_VENT_REQ) THEN
			ES_STATE := PV_ISOLATING;
		ELSIF (NOT PE211_PSH_HI) THEN
			ES_STATE := PV_FAST_VENTING;
		END_IF

	PV_RP_STARTING:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := TRUE;
		RPV211_OPN_REQ_ES := FALSE;
		RP211_ON_REQ_ES := TRUE;
		VPV211_SLOW_OPN_REQ_ES := FALSE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := FALSE;
		TP211_ON_REQ_ES := FALSE;

		IF (ES_REQUEST = PV_NONE_REQ) THEN
			ES_STATE := PV_RP_STARTING;
		ELSIF NOT (ES_REQUEST = PV_PUMP_REQ) THEN
			ES_STATE := PV_ISOLATING;
		ELSIF (RP211_ON) THEN
			(* ignore RP211_PSL *)
			ES_STATE := PV_RP_PUMPING;
		END_IF

	PV_RP_PUMPING:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := TRUE;
		RPV211_OPN_REQ_ES := TRUE;
		RP211_ON_REQ_ES := TRUE;
		VPV211_SLOW_OPN_REQ_ES := FALSE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := FALSE;
		TP211_ON_REQ_ES := FALSE;

		IF (ES_REQUEST = PV_NONE_REQ) THEN
			ES_STATE := PV_RP_PUMPING;
		ELSIF NOT (ES_REQUEST = PV_PUMP_REQ) THEN
			ES_STATE := PV_ISOLATING;
		ELSIF (PE211_PSL_MIDLO) THEN
			ES_STATE := PV_RP_PUMPED;
		END_IF

	PV_RP_PUMPED:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := TRUE;
		RPV211_OPN_REQ_ES := TRUE;
		RP211_ON_REQ_ES := TRUE;
		VPV211_SLOW_OPN_REQ_ES := FALSE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := FALSE;
		TP211_ON_REQ_ES := FALSE;

		IF (ES_REQUEST = PV_NONE_REQ) THEN
			ES_STATE := PV_RP_PUMPED;
		ELSIF NOT (ES_REQUEST = PV_PUMP_REQ) THEN
			ES_STATE := PV_ISOLATING;
		ELSIF (NOT PE211_PSL_MIDLO) THEN
			ES_STATE := PV_RP_PUMPING;
		ELSIF (TP211_OK) THEN
			(* First isolate, then go to TP_STARTING *)
			ES_STATE := PV_ISOLATING;
		END_IF

	PV_TP_PUMPING:
		V204_CLS_REQ_ES := TRUE;
		LLV211_CLS_REQ_ES := TRUE;
		RPV211_OPN_REQ_ES := FALSE;
		RP211_ON_REQ_ES := TRUE; (* Leave on in case MIDLO false *)
		VPV211_SLOW_OPN_REQ_ES := FALSE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := TRUE;
		TP211_ON_REQ_ES := TRUE;

		IF (ES_REQUEST = PV_NONE_REQ) THEN
			ES_STATE := PV_TP_PUMPING;
		ELSIF NOT (ES_REQUEST = PV_PUMP_REQ) THEN
			ES_STATE := PV_ISOLATING;
		ELSIF (NOT PE211_PSL_MIDLO) THEN
			ES_STATE := PV_RP_PUMPING;
		ELSIF (PE211_PSL_LO) THEN
			ES_STATE := PV_PUMPED;
		END_IF

	PV_PUMPED:
		V204_CLS_REQ_ES := FALSE;
		LLV211_CLS_REQ_ES := FALSE; (* LLV211 can be opened when both ES211 and LL211 are pumped *)
		RPV211_OPN_REQ_ES := FALSE;
		RP211_ON_REQ_ES := FALSE;
		VPV211_SLOW_OPN_REQ_ES := FALSE;
		VPV211_FAST_OPN_REQ_ES := FALSE;
		TPV211_OPN_REQ_ES := TRUE;
		TP211_ON_REQ_ES := TRUE;

		IF (ES_REQUEST = PV_NONE_REQ) THEN
			ES_STATE := PV_PUMPED;
		ELSIF NOT (ES_REQUEST = PV_PUMP_REQ) THEN
			ES_STATE := PV_ISOLATING;
		ELSIF (NOT PE211_PSL_MIDLO) THEN
			(* return to PV_RP_PUMPING via PV_ISOLATING *)
			ES_STATE := PV_ISOLATING;
		ELSIF (PE211_PSL_LO) THEN
			ES_STATE := PV_PUMPED;
		END_IF

	ELSE
		(* Invalid State, should never get here *)
		ES_STATE := PV_ERROR;

END_CASE


END_ACTION

ACTION	Fault_Logic:
(* Latched interlocks *)

LL_ACTUATOR_OK := ACTUATOR_OK AND (LL_ACTUATOR_OK OR RESET_REQ);
LL_PE101_PSL_LO := PE101_PSL_LO AND (LL_PE101_PSL_LO OR RESET_REQ);
LL_PE201_PSL_LO := PE201_PSL_LO AND (LL_PE201_PSL_LO OR RESET_REQ);
LL_V202_OPN := V202_OPN AND (LL_V202_OPN OR RESET_REQ);
LL_PE202_PSL_LO := PE202_PSL_LO AND (LL_PE202_PSL_LO OR RESET_REQ);
LL_PE203_PSL_LO := PE203_PSL_LO AND (LL_PE203_PSL_LO OR RESET_REQ);

LL_ES_CONFIG_OK := ES_CONFIG_OK AND (LL_ES_CONFIG_OK OR RESET_REQ);
LL_LL_CONFIG_OK := LL_CONFIG_OK AND (LL_LL_CONFIG_OK OR RESET_REQ);

LL_PE203_PIY_OK := PE203_PIY_OK AND (LL_PE203_PIY_OK OR RESET_REQ);
LL_PE211_PIY_OK := PE211_PIY_OK AND (LL_PE211_PIY_OK OR RESET_REQ);
LL_PE212_PIY_OK := PE212_PIY_OK AND (LL_PE212_PIY_OK OR RESET_REQ);

LL_BP211_ON := BP211_ON AND (LL_BP211_ON OR RESET_REQ);

LL_TP201_OK := TP201_OK AND (LL_TP201_OK OR RESET_REQ);
LL_TP211_OK := TP211_OK AND (LL_TP211_OK OR RESET_REQ);
LL_TP212_OK := TP212_OK AND (LL_TP212_OK OR RESET_REQ);

Reset_Required :=	(ACTUATOR_OK AND NOT LL_ACTUATOR_OK) OR
					(PE101_PSL_LO AND NOT LL_PE101_PSL_LO) OR
					(PE201_PSL_LO AND NOT LL_PE201_PSL_LO) OR
					(V202_OPN AND NOT LL_V202_OPN) OR
					(PE202_PSL_LO AND NOT LL_PE202_PSL_LO) OR
					(PE203_PSL_LO AND NOT LL_PE203_PSL_LO) OR
					(ES_CONFIG_OK AND NOT LL_ES_CONFIG_OK) OR
					(LL_CONFIG_OK AND NOT LL_LL_CONFIG_OK) OR
					(PE203_PIY_OK AND NOT LL_PE203_PIY_OK) OR
					(PE211_PIY_OK AND NOT LL_PE211_PIY_OK) OR
					(PE212_PIY_OK AND NOT LL_PE212_PIY_OK) OR
					(BP211_ON AND NOT LL_BP211_ON) OR
					(TP201_OK AND NOT LL_TP201_OK) OR
					(TP211_OK AND NOT LL_TP211_OK) OR
					(TP212_OK AND NOT LL_TP212_OK);


END_ACTION

ACTION	LL_SM:
(* LL211 Pump/Vent State Machine *)

(* Always test for PV_ERROR first *)
IF NOT (LL_PE212_PIY_OK AND LL_LL_CONFIG_OK) THEN
	LL_STATE := PV_ERROR;
END_IF

CASE LL_STATE OF

	PV_ERROR:
		LLV211_CLS_REQ_LL := TRUE;
		RPV212_OPN_REQ_LL := FALSE;
		RP211_ON_REQ_LL := FALSE;
		VPV212_SLOW_OPN_REQ_LL := FALSE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := FALSE;
		TP212_ON_REQ_LL := FALSE;

		IF LL_PE212_PIY_OK THEN
			LL_STATE := PV_ISOLATING;
		END_IF

	PV_ISOLATING:
		LLV211_CLS_REQ_LL := TRUE;
		RPV212_OPN_REQ_LL := FALSE;
		RP211_ON_REQ_LL := FALSE;
		VPV212_SLOW_OPN_REQ_LL := FALSE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := FALSE;
		TP212_ON_REQ_LL := FALSE;

		IF LLV211_CSD AND RPV212_CSD  THEN
			LL_STATE := PV_ISOLATED;
		END_IF

	PV_ISOLATED:
		LLV211_CLS_REQ_LL := TRUE;
		RPV212_OPN_REQ_LL := FALSE;
		RP211_ON_REQ_LL := FALSE;
		VPV212_SLOW_OPN_REQ_LL := FALSE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := FALSE;
		TP212_ON_REQ_LL := FALSE;

		IF (LL_REQUEST = PV_VENT_REQ) THEN
			LL_STATE := PV_SLOW_VENTING;
		ELSIF (LL_REQUEST = PV_PUMP_REQ) AND PE212_PSL_MIDLO AND TP212_OK THEN
			LL_STATE := PV_TP_PUMPING;
		ELSIF (LL_REQUEST = PV_PUMP_REQ) THEN
			LL_STATE := PV_RP_STARTING;
		END_IF

	PV_SLOW_VENTING:
		LLV211_CLS_REQ_LL := TRUE;
		RPV212_OPN_REQ_LL := FALSE;
		RP211_ON_REQ_LL := FALSE;
		VPV212_SLOW_OPN_REQ_LL := TRUE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := FALSE;
		TP212_ON_REQ_LL := FALSE;

		IF (LL_REQUEST = PV_NONE_REQ) THEN
			LL_STATE := PV_SLOW_VENTING;
		ELSIF NOT (LL_REQUEST = PV_VENT_REQ) THEN
			LL_STATE := PV_ISOLATING;
		ELSIF (PE212_PSH_MIDHI) THEN
			LL_STATE := PV_FAST_VENTING;
		END_IF

	PV_FAST_VENTING:
		LLV211_CLS_REQ_LL := TRUE;
		RPV212_OPN_REQ_LL := FALSE;
		RP211_ON_REQ_LL := FALSE;
		VPV212_SLOW_OPN_REQ_LL := TRUE;
		VPV212_FAST_OPN_REQ_LL := TRUE;
		TPV212_OPN_REQ_LL := FALSE;
		TP212_ON_REQ_LL := FALSE;

		IF (LL_REQUEST = PV_NONE_REQ) THEN
			LL_STATE := PV_FAST_VENTING;
		ELSIF NOT (LL_REQUEST = PV_VENT_REQ) THEN
			LL_STATE := PV_ISOLATING;
		ELSIF (PE212_PSH_HI) THEN
			LL_STATE := PV_VENTED;
		END_IF

	PV_VENTED:
		LLV211_CLS_REQ_LL := FALSE; (* LLV211 can be opened when both ES211 and LL211 are vented *)
		RPV212_OPN_REQ_LL := FALSE;
		RP211_ON_REQ_LL := FALSE;
		VPV212_SLOW_OPN_REQ_LL := FALSE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := FALSE;
		TP212_ON_REQ_LL := FALSE;

		IF (LL_REQUEST = PV_NONE_REQ) THEN
			LL_STATE := PV_VENTED;
		ELSIF NOT (LL_REQUEST = PV_VENT_REQ) THEN
			LL_STATE := PV_ISOLATING;
		ELSIF (NOT PE212_PSH_HI) THEN
			LL_STATE := PV_FAST_VENTING;
		END_IF

	PV_RP_STARTING:
		LLV211_CLS_REQ_ES := TRUE;
		RPV212_OPN_REQ_LL := FALSE;
		RP211_ON_REQ_LL := TRUE;
		VPV212_SLOW_OPN_REQ_LL := FALSE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := FALSE;
		TP212_ON_REQ_LL := FALSE;

		IF (LL_REQUEST = PV_NONE_REQ) THEN
			LL_STATE := PV_RP_STARTING;
		ELSIF NOT (LL_REQUEST = PV_PUMP_REQ) THEN
			LL_STATE := PV_ISOLATING;
		ELSIF (RP211_ON) THEN
			(* ignore RP211_PSL *)
			LL_STATE := PV_RP_PUMPING;
		END_IF

	PV_RP_PUMPING:
		LLV211_CLS_REQ_LL := TRUE;
		RPV212_OPN_REQ_LL := TRUE;
		RP211_ON_REQ_LL := TRUE;
		VPV212_SLOW_OPN_REQ_LL := FALSE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := FALSE;
		TP212_ON_REQ_LL := FALSE;

		IF (LL_REQUEST = PV_NONE_REQ) THEN
			LL_STATE := PV_RP_PUMPING;
		ELSIF NOT (LL_REQUEST = PV_PUMP_REQ) THEN
			LL_STATE := PV_ISOLATING;
		ELSIF (PE212_PSL_MIDLO) THEN
			LL_STATE := PV_RP_PUMPED;
		END_IF

	PV_RP_PUMPED:
		LLV211_CLS_REQ_LL := TRUE;
		RPV212_OPN_REQ_LL := TRUE;
		RP211_ON_REQ_LL := TRUE;
		VPV212_SLOW_OPN_REQ_LL := FALSE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := FALSE;
		TP212_ON_REQ_LL := FALSE;

		IF (LL_REQUEST = PV_NONE_REQ) THEN
			LL_STATE := PV_RP_PUMPED;
		ELSIF NOT (LL_REQUEST = PV_PUMP_REQ) THEN
			LL_STATE := PV_ISOLATING;
		ELSIF (NOT PE212_PSL_MIDLO) THEN
			LL_STATE := PV_RP_PUMPING;
		ELSIF (TP212_OK) THEN
			(* First isolate, then go to TP_STARTING *)
			LL_STATE := PV_ISOLATING;
		END_IF

	PV_TP_PUMPING:
		LLV211_CLS_REQ_LL := TRUE;
		RPV212_OPN_REQ_LL := FALSE;
		RP211_ON_REQ_LL := TRUE; (* Leave on in case MIDLO false *)
		VPV212_SLOW_OPN_REQ_LL := FALSE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := TRUE;
		TP212_ON_REQ_LL := TRUE;

		IF (LL_REQUEST = PV_NONE_REQ) THEN
			LL_STATE := PV_TP_PUMPING;
		ELSIF NOT (LL_REQUEST = PV_PUMP_REQ) THEN
			LL_STATE := PV_ISOLATING;
		ELSIF (NOT PE212_PSL_MIDLO) THEN
			LL_STATE := PV_RP_PUMPING;
		ELSIF (PE212_PSL_LO) THEN
			LL_STATE := PV_PUMPED;
		END_IF

	PV_PUMPED:
		LLV211_CLS_REQ_LL := FALSE; (* LLV211 can be opened when both ES211 and LL211 are pumped *)
		RPV212_OPN_REQ_LL := FALSE;
		RP211_ON_REQ_LL := FALSE;
		VPV212_SLOW_OPN_REQ_LL := FALSE;
		VPV212_FAST_OPN_REQ_LL := FALSE;
		TPV212_OPN_REQ_LL := TRUE;
		TP212_ON_REQ_LL := TRUE;

		IF (LL_REQUEST = PV_NONE_REQ) THEN
			LL_STATE := PV_PUMPED;
		ELSIF NOT (LL_REQUEST = PV_PUMP_REQ) THEN
			LL_STATE := PV_ISOLATING;
		ELSIF (NOT PE212_PSL_MIDLO) THEN
			(* return to PV_RP_PUMPING via PV_ISOLATING *)
			LL_STATE := PV_ISOLATING;
		ELSIF (PE212_PSL_LO) THEN
			LL_STATE := PV_PUMPED;
		END_IF

	ELSE
		(* Invalid State, should never get here *)
		LL_STATE := PV_ERROR;

END_CASE

END_ACTION

ACTION	Process_Inputs:
(*=== Processed Inputs *)
(* DISCRETE IN *)
PE101_PSL_LO := DI_PE101_PSL_LO;
PE201_PSL_LO := DI_PE201_PSL_LO;
PE202_PSL_LO := DI_PE202_PSL_LO;

RP211_ON := DI_RP2110_ON;
BP211_ON := DI_RP2111_ON;
RP211_PSL := DI_PE2110_PSL;
BP211_PSL := DI_PE2111_PSL;

PE203_PIY_OK := DI_PE203_PIY_OK;
PE203_PSH_HI := DI_PE203_PIY_OK AND NOT DI_PE203_PSL_HI;
PE203_PSH_MIDHI := DI_PE203_PIY_OK AND NOT DI_PE203_PSL_MIDHI;
PE203_PSL_MIDLO := DI_PE203_PSL_MIDLO;
PE203_PSL_LO := DI_PE203_PSL_LO;

PE211_PIY_OK := DI_PE211_PIY_OK;
PE211_PSH_HI := DI_PE211_PIY_OK AND NOT DI_PE211_PSL_HI;
PE211_PSH_MIDHI := DI_PE211_PIY_OK AND NOT DI_PE211_PSL_MIDHI;
PE211_PSL_MIDLO := DI_PE211_PSL_MIDLO;
PE211_PSL_LO := DI_PE211_PSL_LO;

PE212_PIY_OK := DI_PE212_PIY_OK;
PE212_PSH_HI := DI_PE212_PIY_OK AND NOT DI_PE212_PSL_HI;
PE212_PSH_MIDHI := DI_PE212_PIY_OK AND NOT DI_PE212_PSL_MIDHI;
PE212_PSL_MIDLO := DI_PE212_PSL_MIDLO;
PE212_PSL_LO := DI_PE212_PSL_LO;

V100_OPN := DI_V100_OPEN;
V100_CSD := DI_V100_CLOSED;

V101_OPN := DI_V101_OPEN AND DO_V101_OPEN_CMD;
V101_CSD := DI_V101_CLOSED AND NOT DO_V101_OPEN_CMD;

V201_OPN := DI_V201_OPEN AND DO_V201_OPEN_CMD;
V201_CSD := DI_V201_CLOSED AND NOT DO_V201_OPEN_CMD;

V202_OPN := DI_V202_OPEN;
V202_CSD := DI_V202_CLOSED;

V203_OPN := DI_V203_OPEN AND DO_V203_OPEN_CMD;
V203_CSD := DI_V203_CLOSED AND NOT DO_V203_OPEN_CMD;

V204_OPN := DI_V204_OPEN AND DO_V204_OPEN_CMD;
V204_CSD := DI_V204_CLOSED AND NOT DO_V204_OPEN_CMD;

TP201_OK := DI_TP201_TURBO_OK;
TP201_ON := TP201_OK AND DO_TP201_ON_CMD;
TP201_READY := TP201_ON AND DI_TP201_AT_SPEED;

VPV211_OPN := DO_VENT211_SLOW_CMD OR DO_VENT211_FAST_CMD;
VPV211_CSD := NOT VPV211_OPN;

RPV211_OPN := DI_RPV211_OPEN AND DO_RPV211_OPEN_CMD;
RPV211_CSD := DI_RPV211_CLOSED AND NOT DO_RPV211_OPEN_CMD;

TPV211_OPN := DI_TPV211_OPEN AND DO_TPV211_OPEN_CMD;
TPV211_CSD := DI_TPV211_CLOSED AND NOT DO_TPV211_OPEN_CMD;

TP211_OK := DI_TP211_TURBO_OK;
TP211_READY := DI_TP211_AT_SPEED AND DO_TP211_ON_CMD;

VPV212_OPN := DO_VENT212_SLOW_CMD OR DO_VENT212_FAST_CMD;
VPV212_CSD := NOT VPV212_OPN;

RPV212_OPN := DI_RPV212_OPEN AND DO_RPV212_OPEN_CMD;
RPV212_CSD := DI_RPV212_CLOSED AND NOT DO_RPV212_OPEN_CMD;

TPV212_OPN := DI_TPV212_OPEN AND DO_TPV212_OPEN_CMD;
TPV212_CSD := DI_TPV212_CLOSED AND NOT DO_TPV212_OPEN_CMD;

TP212_OK := DI_TP212_TURBO_OK;
TP212_READY := DI_TP212_AT_SPEED AND DO_TP212_ON_CMD;

LLV211_OPN := DI_SLOTV211_OPEN;
LLV211_CSD := DI_SLOTV211_CLOSED;

LL211_LID_CLOSED := DI_LL211_LID_CLOSED;
LL211_ARM_RETRACTED := DI_LL211_ARM_RETRACTED;

END_ACTION

ACTION	Process_Outputs:
(* Process Outputs *)

DO_RP2110_ON_CMD := RP211.on_cmd;
DO_RP2111_ON_CMD := BP211_ON_CMD;
DO_V101_OPEN_CMD := V101.open_cmd;
DO_V201_OPEN_CMD := V201.open_cmd;
DO_V203_OPEN_CMD := V203.open_cmd;
DO_V204_OPEN_CMD := V204.open_cmd;
DO_TP201_ON_CMD := TP201.on_cmd;
DO_TP201_VENT_ENABLE_CMD := VPV201.open_cmd;

DO_TP211_ON_CMD := TP211.on_cmd;
DO_TPV211_OPEN_CMD := TPV211.open_cmd;
DO_RPV211_OPEN_CMD := RPV211.open_cmd;
DO_VENT211_SLOW_CMD := VPV211_SLOW.open_cmd;
DO_VENT211_FAST_CMD := VPV211_FAST.open_cmd;

DO_SLOTV211_OPEN_CMD := LLV211.open_cmd;
DO_SLOTV211_CLOSE_CMD := LLV211.close_cmd;

DO_TP212_ON_CMD := TP212.on_cmd;
DO_TPV212_OPEN_CMD := TPV212.open_cmd;
DO_RPV212_OPEN_CMD := RPV212.open_cmd;
DO_VENT212_SLOW_CMD := VPV212_SLOW.open_cmd;
DO_VENT212_FAST_CMD := VPV212_FAST.open_cmd;

END_ACTION

ACTION	Pumps:
(* Pump Control Logic *)

(* BP211 *)
BP211_ON_CMD := TRUE; (* always on *)

(* RP211 *)
RP211.on_ena := TRUE;
RP211.off_ena := RPV211_CSD AND RPV212_CSD;
RP211.on_req := RP211_ON_REQ_ES OR RP211_ON_REQ_LL;
RP211.off_req := NOT RP211.on_req;
RP211();

(* TP201 *)
TP201.on_intlk := LL_PE203_PIY_OK;
TP201.on_ena := TRUE;
TP201.off_ena := V203_CSD AND V204_CSD;
TP201.on_req := TP201_ON_REQ_SC;
TP201.off_req := TP201_OFF_REQ_SC;
TP201();

(* TP211 *)
TP211.on_intlk := LL_BP211_ON;
TP211.on_ena := TPV211_CSD;
TP211.off_ena := TPV211_CSD;
TP211.on_req := TP211_ON_REQ_ES;
TP211.off_req := NOT TP211.on_req;
TP211();

(* TP212 *)
TP212.on_intlk := LL_BP211_ON;
TP212.on_ena := TPV212_CSD;
TP212.off_ena := TPV212_CSD;
TP212.on_req := TP212_ON_REQ_LL;
TP212.off_req := NOT TP212.on_req;
TP212();

END_ACTION

ACTION	SC_Inputs:
(* Supervisory Control Inputs *)
RESET_REQ := SC_RESET_REQ;

(* Level-Triggered signals *)

(* Edge-Triggered signals *)
V101_OPN_REQ_SC := SC_V101_OPN_REQ;
V101_CLS_REQ_SC := SC_V101_CLS_REQ;
V201_OPN_REQ_SC := SC_V201_OPN_REQ;
V201_CLS_REQ_SC := SC_V201_CLS_REQ;
V203_OPN_REQ_SC := SC_V203_OPN_REQ;
V203_CLS_REQ_SC := SC_V203_CLS_REQ;
V204_OPN_REQ_SC := SC_V204_OPN_REQ;
V204_CLS_REQ_SC := SC_V204_CLS_REQ;
TP201_ON_REQ_SC := SC_TP201_ON_REQ;
TP201_OFF_REQ_SC := SC_TP201_OFF_REQ;
TP201_VENT_ENABLE_REQ_SC := SC_TP201_VENT_ENABLE_REQ;
TP201_VENT_DISABLE_REQ_SC := SC_TP201_VENT_DISABLE_REQ;
LLV211_OPN_REQ_SC := SC_SLOTV211_OPN_REQ;
LLV211_CLS_REQ_SC := SC_SLOTV211_CLS_REQ;

(* BR_REQ *)
CASE SC_BR_CMD_REQ OF
	0:
		BR_REQUEST := BR_NONE_REQ;
	1:
		BR_REQUEST := BR_SINS1_REQ;
	2:
		BR_REQUEST := BR_SINS2_REQ;
	3:
		BR_REQUEST := BR_SINS3_REQ;
	4:
		BR_REQUEST := BR_YAG_REQ;
	ELSE
		BR_REQUEST := BR_NONE_REQ;
END_CASE;

(* ES_REQ *)
CASE SC_ES_CMD_REQ OF
	0:
		ES_REQUEST := PV_NONE_REQ;
	1:
		ES_REQUEST := PV_ISOLATE_REQ;
	2:
		ES_REQUEST := PV_PUMP_REQ;
	3:
		ES_REQUEST := PV_VENT_REQ;
	ELSE
		ES_REQUEST := PV_NONE_REQ;
END_CASE;


(* LL_REQ *)
CASE SC_LL_CMD_REQ OF
	0:
		LL_REQUEST := PV_NONE_REQ;
	1:
		LL_REQUEST := PV_ISOLATE_REQ;
	2:
		LL_REQUEST := PV_PUMP_REQ;
	3:
		LL_REQUEST := PV_VENT_REQ;
	ELSE
		LL_REQUEST := PV_NONE_REQ;
END_CASE;





END_ACTION

ACTION	SC_Outputs:
(* Supervisory Control Outputs *)
SC_RESET_REQUIRED := Reset_Required;
SC_ATB := TRUE;
SC_AFB := FALSE;

(* Inputs *)
SC_PE101_PSL := PE101_PSL_LO;
SC_PE201_PSL := PE201_PSL_LO;
SC_PE202_PSL := PE202_PSL_LO;

SC_RP2110_AT_SPEED := DI_RP2110_ON;
SC_RP2111_AT_SPEED := DI_RP2111_ON;
SC_PE2110_PSL := DI_PE2110_PSL;
SC_PE2111_PSL := DI_PE2111_PSL;

SC_PE203_OK := DI_PE203_PIY_OK;
SC_PE203_PSL_HI := DI_PE203_PSL_HI;
SC_PE203_PSL_MIDHI := DI_PE203_PSL_MIDHI;
SC_PE203_PSL_MIDLO := DI_PE203_PSL_MIDLO;
SC_PE203_PSL_LO := DI_PE203_PSL_LO;

SC_PE211_OK := DI_PE211_PIY_OK;
SC_PE211_PSL_HI := DI_PE211_PSL_HI;
SC_PE211_PSL_MIDHI := DI_PE211_PSL_MIDHI;
SC_PE211_PSL_MIDLO := DI_PE211_PSL_MIDLO;
SC_PE211_PSL_LO := DI_PE211_PSL_LO;

SC_PE212_OK := DI_PE212_PIY_OK;
SC_PE212_PSL_HI := DI_PE212_PSL_HI;
SC_PE212_PSL_MIDHI := DI_PE212_PSL_MIDHI;
SC_PE212_PSL_MIDLO := DI_PE212_PSL_MIDLO;
SC_PE212_PSL_LO := DI_PE212_PSL_LO;

SC_LL211_LID_CLOSED := DI_LL211_LID_CLOSED;
SC_LL211_ARM_RETRACTED := DI_LL211_ARM_RETRACTED;

SC_V100_OPEN := V100_OPN;
SC_V100_CLOSED := V100_CSD;

SC_V101_BEAM_PASS := (NOT V100_CSD) AND (NOT V101_CSD) AND (BR_STATE = BR_SINS1_READY);
SC_V101_OPEN := V101_OPN;
SC_V101_CLOSED := V101_CSD;
SC_V101_OPEN_PERMIT := V101.open_ena;
SC_V101_CLOSE_PERMIT := V101.close_ena;
SC_V101_OPEN_CMD := V101.open_cmd;
SC_V101_NOT_SYMBOL := V101.not_symbol;

SC_V201_BEAM_PASS := (NOT V100_CSD) AND (NOT V201_CSD) AND (BR_STATE = BR_SINS2_READY);
SC_V201_OPEN := V201_OPN;
SC_V201_CLOSED := V201_CSD;
SC_V201_OPEN_PERMIT := V201.open_ena;
SC_V201_CLOSE_PERMIT := V201.close_ena;
SC_V201_OPEN_CMD := V201.open_cmd;
SC_V201_NOT_SYMBOL := V201.not_symbol;

SC_V202_OPEN := V202_OPN;
SC_V202_CLOSED := V202_CSD;
SC_V202_BEAM_PASS := SC_V201_BEAM_PASS AND (NOT V202_CSD);

SC_V203_BEAM_PASS := SC_V202_BEAM_PASS AND (NOT V203_CSD);
SC_V203_OPEN := V203_OPN;
SC_V203_CLOSED := V203_CSD;
SC_V203_OPEN_PERMIT := V203.open_ena;
SC_V203_CLOSE_PERMIT := V203.close_ena;
SC_V203_OPEN_CMD := V203.open_cmd;
SC_V203_NOT_SYMBOL := V203.not_symbol;

SC_V204_BEAM_PASS := SC_V203_BEAM_PASS AND (NOT V204_CSD);
SC_V204_OPEN := V204_OPN;
SC_V204_CLOSED := V204_CSD;
SC_V204_OPEN_PERMIT := V204.open_ena;
SC_V204_CLOSE_PERMIT := V204.close_ena;
SC_V204_OPEN_CMD := V204.open_cmd;
SC_V204_NOT_SYMBOL := V204.not_symbol;

SC_RPV211_OPEN := RPV211_OPN;
SC_RPV211_CLOSED := RPV211_CSD;
SC_RPV211_OPEN_CMD := RPV211.open_cmd;

SC_VENT211_SLOW_CMD := VPV211_SLOW.open_cmd;
SC_VENT211_FAST_CMD := VPV211_FAST.open_cmd;

SC_TPV211_OPEN := TPV211_OPN;
SC_TPV211_CLOSED := TPV211_CSD;
SC_TPV211_OPEN_CMD := TPV211.open_cmd;

SC_SLOTV211_OPEN := LLV211_OPN;
SC_SLOTV211_CLOSED := LLV211_CSD;
SC_SLOTV211_OPEN_PERMIT := LLV211.open_ena;
SC_SLOTV211_CLOSE_PERMIT := LLV211.close_ena;
SC_SLOTV211_OPEN_CMD := LLV211.open_cmd;
SC_SLOTV211_CLOSE_CMD := LLV211.close_cmd;
SC_SLOTV211_NOT_SYMBOL := LLV211.not_symbol;

SC_RPV212_OPEN := RPV212_OPN;
SC_RPV212_CLOSED := RPV212_CSD;
SC_RPV212_OPEN_CMD := RPV212.open_cmd;

SC_VENT212_SLOW_CMD := VPV212_SLOW.open_cmd;
SC_VENT212_FAST_CMD := VPV212_FAST.open_cmd;

SC_TPV212_OPEN := TPV212_OPN;
SC_TPV212_CLOSED := TPV212_CSD;
SC_TPV212_OPEN_CMD := TPV212.open_cmd;

SC_RP2110_ON := RP211_ON;
SC_RP2110_ON_CMD := RP211.on_cmd;

SC_RP2111_ON := BP211_ON;
SC_RP2111_ON_CMD := BP211_ON_CMD;

SC_TP201_VENT_ENABLE_CMD := VPV201.open_cmd;
SC_TP201_VENT_NOT_SYMBOL := VPV201.not_symbol;

SC_TP201_OK := TP201_OK;
SC_TP201_ON := TP201_ON;
SC_TP201_OFF := NOT TP201.on_cmd;
SC_TP201_ON_PERMIT := TP201.on_ena;
SC_TP201_OFF_PERMIT := TP201.off_ena;
SC_TP201_ON_CMD := TP201.on_cmd;
SC_TP201_NOT_SYMBOL := TP201.not_symbol;

SC_TP211_OK := TP211_OK;
SC_TP211_ON := TP211_READY;
SC_TP211_OFF := NOT TP211.on_cmd;

SC_TP212_OK := TP212_OK;
SC_TP212_ON := TP212_READY;
SC_TP212_OFF := NOT TP212.on_cmd;


(* INTERLOCKS *)
SC_LL_ACTUATOR_OK := LL_ACTUATOR_OK;
SC_LL_PE101_PSL := LL_PE101_PSL_LO;
SC_LL_PE201_PSL := LL_PE201_PSL_LO;
SC_LL_V202_OPN := LL_V202_OPN;
SC_LL_PE202_PSL := LL_PE202_PSL_LO;
SC_LL_PE203_OK := LL_PE203_PIY_OK;
SC_LL_PE203_PSL_LO := LL_PE203_PSL_LO;
SC_LL_TP201_OK := LL_TP201_OK;

SC_LL_ES_CONFIG_OK := LL_ES_CONFIG_OK;
SC_LL_LL_CONFIG_OK := LL_LL_CONFIG_OK;
SC_LL_PE211_OK := LL_PE211_PIY_OK;
SC_LL_PE212_OK := LL_PE212_PIY_OK;
SC_LL_RP2111_ON := LL_BP211_ON;
SC_LL_PE2111_PSL := BP211_PSL; (* This is just in case LabView needs it *)
SC_LL_TP211_TURBO_OK := LL_TP211_OK;
SC_LL_TP212_TURBO_OK := LL_TP212_OK;


(* PLC_OUT REGISTERS *)


(* Version Numbers *)
SC_VERSION_MAJOR := cVERSION_MAJOR;
SC_VERSION_MINOR := cVERSION_MINOR;

(* Analog vacuum pressure *)
SC_PE101_PIY := AI_PE101_PIY;
SC_PE201_PIY := AI_PE201_PIY;
SC_PE202_PIY := AI_PE202_PIY;
SC_PE203_HI_PIY := AI_PE203_HI_PIY;
SC_PE203_LO_PIY := AI_PE203_LO_PIY;
SC_PE211_HI_PIY := AI_PE211_HI_PIY;
SC_PE211_LO_PIY := AI_PE211_LO_PIY;
SC_PE212_HI_PIY := AI_PE212_HI_PIY;
SC_PE212_LO_PIY := AI_PE212_LO_PIY;

(* Current BR_REQ *)
CASE BR_REQUEST OF
	BR_NONE_REQ:
		SC_BR_CMD_VAL := 0;
	BR_SINS1_REQ:
		SC_BR_CMD_VAL := 1;
	BR_SINS2_REQ:
		SC_BR_CMD_VAL := 2;
	BR_SINS3_REQ:
		SC_BR_CMD_VAL := 3;
	BR_YAG_REQ:
		SC_BR_CMD_VAL := 4;
	ELSE
		(* should never get here *)
		SC_BR_CMD_VAL := 0;
END_CASE;

(* Current ES_REQ *)
CASE ES_REQUEST OF
	PV_NONE_REQ:
		SC_ES_CMD_VAL := 0;
	PV_ISOLATE_REQ:
		SC_ES_CMD_VAL := 1;
	PV_PUMP_REQ:
		SC_ES_CMD_VAL := 2;
	PV_VENT_REQ:
		SC_ES_CMD_VAL := 3;
	ELSE
		(* should never get here *)
		SC_ES_CMD_VAL := 0;
END_CASE;

(* Current LL_REQ *)
CASE LL_REQUEST OF
	PV_NONE_REQ:
		SC_LL_CMD_VAL := 0;
	PV_ISOLATE_REQ:
		SC_LL_CMD_VAL := 1;
	PV_PUMP_REQ:
		SC_LL_CMD_VAL := 2;
	PV_VENT_REQ:
		SC_LL_CMD_VAL := 3;
	ELSE
		(* should never get here *)
		SC_LL_CMD_VAL := 0;
END_CASE;


(* Current BR_STATE *)
CASE BR_STATE OF
	BR_ERROR:
		SC_BR_STATE := 0;
	BR_SINS1_READY:
		(* SINS.1 *)
		SC_BR_STATE := 1;
	BR_SINS2_READY:
		(* SINS.2 *)
		SC_BR_STATE := 2;
	BR_SINS3_READY:
		(* SINS.3 *)
		SC_BR_STATE := 3;
	BR_YAG_READY:
		(* YAG *)
		SC_BR_STATE := 4;
	BR_SINS1_SELECTING, BR_SINS2_SELECTING, BR_SINS3_SELECTING, BR_YAG_SELECTING:
		(* BUSY *)
		SC_BR_STATE := 5;
	ELSE
		(* should never get here *)
		SC_BR_STATE := 16#FFFF;
END_CASE;

(* Current ES_STATE *)
CASE ES_STATE OF
	PV_ERROR:
		SC_ES_STATE := 0;
	PV_ISOLATING:
		SC_ES_STATE := 1;
	PV_ISOLATED:
		SC_ES_STATE := 2;
	PV_SLOW_VENTING:
		SC_ES_STATE := 3;
	PV_FAST_VENTING:
		SC_ES_STATE := 4;
	PV_VENTED:
		SC_ES_STATE := 5;
	PV_RP_STARTING:
		SC_ES_STATE := 6;
	PV_RP_PUMPING:
		SC_ES_STATE := 7;
	PV_RP_PUMPED:
		SC_ES_STATE := 8;
	PV_TP_PUMPING:
		SC_ES_STATE := 9;
	PV_PUMPED:
		SC_ES_STATE := 10;
	ELSE
		(* should never get here *)
		SC_ES_STATE := 16#FFFF;
END_CASE;

(* Current LL_STATE *)
CASE LL_STATE OF
	PV_ERROR:
		SC_LL_STATE := 0;
	PV_ISOLATING:
		SC_LL_STATE := 1;
	PV_ISOLATED:
		SC_LL_STATE := 2;
	PV_SLOW_VENTING:
		SC_LL_STATE := 3;
	PV_FAST_VENTING:
		SC_LL_STATE := 4;
	PV_VENTED:
		SC_LL_STATE := 5;
	PV_RP_STARTING:
		SC_LL_STATE := 6;
	PV_RP_PUMPING:
		SC_LL_STATE := 7;
	PV_RP_PUMPED:
		SC_LL_STATE := 8;
	PV_TP_PUMPING:
		SC_LL_STATE := 9;
	PV_PUMPED:
		SC_LL_STATE := 10;
	ELSE
		(* should never get here *)
		SC_LL_STATE := 16#FFFF;
END_CASE;

END_ACTION

ACTION	Valves:
(* Valve Control Logic *)

(* V101 *)
V101.open_intlk := LL_PE101_PSL_LO AND LL_PE201_PSL_LO;
V101.open_ena := TRUE;
V101.close_ena := TRUE;
V101.open_req := V101_OPN_REQ_SC;
V101.close_req := V101_CLS_REQ_SC;
V101();

(* V201 *)
V201.open_intlk := LL_PE201_PSL_LO AND LL_V202_OPN AND LL_PE202_PSL_LO;
V201.open_ena := TRUE;
V201.close_ena := TRUE;
V201.open_req := V201_OPN_REQ_SC;
V201.close_req := V201_CLS_REQ_SC;
V201();

(* V203 *)
V203.open_intlk := LL_PE202_PSL_LO AND LL_TP201_OK AND LL_PE203_PSL_LO;
V203.open_ena := TP201_READY;
V203.close_ena := TRUE;
V203.open_req := V203_OPN_REQ_SC;
V203.close_req := V203_CLS_REQ_SC;
V203();

(* VPV201 *)
VPV201.open_intlk := V203_CSD AND V204_CSD AND NOT TP201_ON;
VPV201.open_ena := NOT TP201.on_cmd;
VPV201.close_ena := TRUE;
VPV201.open_req := TP201_VENT_ENABLE_REQ_SC;
VPV201.close_req := TP201_VENT_DISABLE_REQ_SC;
VPV201();

(* V204 *)
V204.open_intlk := LL_PE203_PSL_LO AND LL_TP201_OK AND PE211_PSL_LO;
V204.open_ena := (ES_STATE = PV_PUMPED) AND LLV211_CSD AND TP201_READY;
V204.close_ena := TRUE;
V204.open_req := V204_OPN_REQ_SC;
V204.close_req := V204_CLS_REQ_SC OR V204_CLS_REQ_ES;
V204();

(* LLV211 *)
LLV211.open_intlk	:= 	((ES_STATE = PV_PUMPED) AND (LL_STATE = PV_PUMPED)) OR
						((ES_STATE = PV_VENTED) AND (LL_STATE = PV_VENTED));
LLV211.open_ena		:=	V204_CSD;
LLV211.close_intlk	:=	LL211_ARM_RETRACTED OR LLV211_CSD;
LLV211.close_ena	:=	LL211_ARM_RETRACTED;
LLV211.open_req		:=	LLV211_OPN_REQ_SC;
LLV211.close_req	:=	LLV211_CLS_REQ_SC OR LLV211_CLS_REQ_ES OR LLV211_CLS_REQ_LL;
LLV211();

(* VPV211_SLOW *)
VPV211_SLOW.open_intlk	:= V204_CSD AND LLV211_CSD AND TPV211_CSD AND RPV211_CSD;
VPV211_SLOW.open_ena	:= TRUE;
VPV211_SLOW.close_ena	:= TRUE;
VPV211_SLOW.open_req	:= VPV211_SLOW_OPN_REQ_ES;
VPV211_SLOW.close_req	:= NOT VPV211_SLOW_OPN_REQ_ES;
VPV211_SLOW();

(* VPV211_FAST *)
VPV211_FAST.open_intlk	:= V204_CSD AND LLV211_CSD AND TPV211_CSD AND RPV211_CSD;
VPV211_FAST.open_ena	:= TRUE;
VPV211_FAST.close_ena	:= TRUE;
VPV211_FAST.open_req	:= VPV211_FAST_OPN_REQ_ES;
VPV211_FAST.close_req	:= NOT VPV211_FAST_OPN_REQ_ES;
VPV211_FAST();

(* RPV211 *)
RPV211.open_intlk	:=	RP211_ON AND V204_CSD AND LLV211_CSD AND VPV211_CSD;
RPV211.open_ena		:=	NOT PE211_PSL_MIDLO AND RPV212_CSD;
RPV211.close_ena	:=	TRUE;
RPV211.open_req		:=	RPV211_OPN_REQ_ES;
RPV211.close_req	:=	NOT RPV211_OPN_REQ_ES;
RPV211();

(* TPV211 *)
TPV211.open_intlk	:=	PE211_PSL_MIDLO AND LL_BP211_ON AND LL_PE211_PIY_OK AND TP211.on_cmd;
TPV211.open_ena		:=	TRUE;
TPV211.close_ena	:=	V204_CSD AND LLV211_CSD;
TPV211.open_req		:=	TPV211_OPN_REQ_ES;
TPV211.close_req	:=	NOT TPV211_OPN_REQ_ES;
TPV211();

(* VPV212_SLOW *)
VPV212_SLOW.open_intlk	:= LLV211_CSD AND TPV212_CSD AND RPV212_CSD;
VPV212_SLOW.open_ena	:= TRUE;
VPV212_SLOW.close_ena	:= TRUE;
VPV212_SLOW.open_req	:= VPV212_SLOW_OPN_REQ_LL;
VPV212_SLOW.close_req	:= NOT VPV212_SLOW_OPN_REQ_LL;
VPV212_SLOW();

(* VPV212_FAST *)
VPV212_FAST.open_intlk	:= LLV211_CSD AND TPV212_CSD AND RPV212_CSD;
VPV212_FAST.open_ena	:= TRUE;
VPV212_FAST.close_ena	:= TRUE;
VPV212_FAST.open_req	:= VPV212_FAST_OPN_REQ_LL;
VPV212_FAST.close_req	:= NOT VPV212_FAST_OPN_REQ_LL;
VPV212_FAST();

(* RPV212 *)
RPV212.open_intlk	:=	RP211_ON AND LLV211_CSD AND VPV212_CSD;
RPV212.open_ena		:=	NOT PE212_PSL_MIDLO AND RPV211_CSD;
RPV212.close_ena	:=	TRUE;
RPV212.open_req		:=	RPV212_OPN_REQ_LL;
RPV212.close_req	:=	NOT RPV212_OPN_REQ_LL;
RPV212();

(* TPV212 *)
TPV212.open_intlk	:=	PE212_PSL_MIDLO AND LL_BP211_ON AND LL_PE212_PIY_OK AND TP212.on_cmd;
TPV212.open_ena		:=	TRUE;
TPV212.close_ena	:=	LLV211_CSD;
TPV212.open_req		:=	TPV212_OPN_REQ_LL;
TPV212.close_req	:=	NOT TPV212_OPN_REQ_LL;
TPV212();


END_ACTION

